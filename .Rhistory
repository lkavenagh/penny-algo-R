load("~/GitHub/penny-algo-R/PennyAlgo.R")
install.packages("quantmod")
library("quantmod")
MAX_STOCKS <- 25
MAX_PRICE <- 0.05
FREQ = 60
setwd("R:\\Documents\\GitHub\\penny-algo-R")
universe <- read.csv("PennyList.csv",nrows=100,header=F,col.names="ticker")
universe <- read.csv("PennyList.csv",nrows=100,header=F,col.names="ticker")
wd
getwd
?getwd
getwd()
?getwd
cd github
cd(github)
?cd
??cd
??changedirectory
??change directory
??"change directory""
""
??"change directory"
"luke" + "hello"
??concat
paste("luke","hello")
paste(getwd())
paste(getwd(),"/github/penny-stock-r")
setwd(paste(getwd(),"/github/penny-stock-r"))
setwd("C:/Users/Luke/Documents /github/penny-stock-r")
setwd("C:/Users/Luke/Documents/github/penny-stock-r")
setwd("C:\Users\Luke\Documents\GitHub\penny-algo-R")
setwd("C:\\Users\\Luke\\Documents\\GitHub\\penny-algo-R")
universe <- read.csv("PennyList.csv",nrows=100,header=F,col.names="ticker")
universe <- read.csv("PennyList.csv",header=F,col.names="ticker")
View(universe)
View(universe)
universe["price"] <- array(NA,2)
for (i in 1:dim(universe)[1]) {
tmp <- getQuote(toString(universe["ticker"][i,1]))[2]
universe["price"][i,1] <- tmp
}
universe = universe[universe["price"] < MAX_PRICE,]
View(universe)
selection <- sample(1:dim(universe)[1],MAX_STOCKS)
fix(selection)
selection
universeSelection <- universe[selection,]
print(universeSelection)
install.packages("rpostgresql")
install.packages("RPostgreSQL")
library("RPostgreSQL")
drv=dbDriver("PostgreSQL")
con=dbConnect(drv, dbname="PennyAlgo")
con=dbConnect(drv, dbname="PennyAlgo", password="pianobookkittenmonster")
con=dbConnect(drv, dbname="PennyAlgo", user="postgres", password="pianobookkittenmonster")
dbListConnections(drv)
rs=dbSendQuery(con,"SELECT * FROM Security")
rs
print(rs)
fetch(rs,n=-1)
fetch(rs,n=1)
fetch(rs,n=2)
fetch(rs,n=-1)
rs
fetch(rs,n=-1)
rs=dbSendQuery(con,"SELECT * FROM Security")
fetch(rs,n=1)
dbGetQuery(con,"SELECT * FROM Security")
i
i=1
universe["ticker"][i]
universe["ticker"][i,1]
universe["ticker"][i,1][1]
toString(universe["ticker"][i,1])
dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \"",toString(universe["ticker"][i,1])))
dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \"",toString(universe["ticker"][i,1]),"\""))
dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
rs=dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
close(rs)
fetch(rs)
fetch(rs,n=-1)
rs=dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
dbClearResults(rs)
dbClearResult(rs)
rs=dbSendQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
rs=dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
print(rs)
?isempty
??isempty
??empty
rs
rs.empty
rs.count
methods(rs)
rs.methods
rs
dim(rs)
length(rs)
universe["ticker"][i,1]
length(rs)==0
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES \'",toString(universe["ticker"][i,1]),"\'"))
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES (\'",toString(universe["ticker"][i,1]),"\')"))
strtrim(' o ')
strtrim(" o ")
trim(" o ")
gsub(" ",""," o ")
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES (\'",gsub(" ","",toString(universe["ticker"][i,1]),"\')"))
)
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES (\'",gsub(" ","",toString(universe["ticker"][i,1])),"\')")
)
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES (\'",gsub(" ","",toString(universe["ticker"][i,1])),"\')"))
gsub(" ","",toString(universe["ticker"][i,1])),"\')")
gsub(" ","",toString(universe["ticker"][i,1]))
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES (\'",gsub(" ","",toString(universe["ticker"][i,1])),"\')"))
paste("INSERT INTO Security (Ticker) VALUES (\'",gsub(" ","",toString(universe["ticker"][i,1])),"\')")
paste("INSERT INTO Security (Ticker) VALUES ('",gsub(" ","",toString(universe["ticker"][i,1])),"')")
gsub(" ","",toString(universe["ticker"][i,1]))
?paste
paste("INSERT INTO Security (Ticker) VALUES ('",gsub(" ","",toString(universe["ticker"][i,1])),"')",sep="")
# Insert universe into Security table
for (i in 1:dim(universe)[1]) {
rs=dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
if (length(rs)==0) {
dbSendQuery(con,paste("INSERT INTO Security (Ticker) VALUES ('",gsub(" ","",toString(universe["ticker"][i,1])),"')",sep=""))
}
}
for (i in 1:dim(universe)[1]) {
rs=dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
if (length(rs)==0) {
dbSendQuery(con,paste("INSERT INTO Security (Ticker, Active) VALUES ('",gsub(" ","",toString(universe["ticker"][i,1])),"',1)",sep=""))
}
}
for (i in 1:dim(universe)[1]) {
rs=dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = \'",toString(universe["ticker"][i,1]),"\'"))
if (length(rs)==0) {
dbSendQuery(con,paste("INSERT INTO Security (Ticker, Active) VALUES ('",gsub(" ","",toString(universe["ticker"][i,1])),"',TRUE)",sep=""))
}
}
rs = dbGetQuery(con, "SELECT * FROM Security");
rs
rs["ticker"]
length(rs)
size(rs)
dim(size)
dim(rs)
dim(rs)[1]
rs = dbGetQuery(con, "SELECT Ticker FROM Security")
rs
universe
universe['Ticker']
universe["ticker"]
universe["tickEr"]
universe["ticker"]
?match
match(rs["ticker"],universe["ticker"])
rs["ticker"] %in% universe["ticker"]
rs["ticker"]
match(c(1,2,3),c(3,4,5))
pmatch(rs["ticker"],universe["ticker"])
pmatch("OPBL",universe["ticker"])
universe["ticker"]
universe["ticker"][1]
universe["ticker"][1,1]
pmatch("AACS",universe["ticker"])
pmatch("AACS",universe["ticker"][1])
pmatch("AACS",universe["ticker"][1,2])
universe["ticker"][1,2]
universe["ticker"][1]
universe["ticker"][1,]
universe["ticker"][1,1]
universe["ticker"][2,1]
toString(universe["ticker"][2,1])
pmatch("ERHE",toString(universe["ticker"][2,1]))
pmatch("ERHE",toString(universe["ticker"]))
pmatch(toString(universe["ticker"]),"ERHE")
pmatch(toString(universe["ticker"]),"AACS")
toString(universe["ticker"])
toString(universe["ticker"][1])
toString(universe["ticker"][1,2])
toString(universe["ticker"][1,3])
toString(universe["ticker"][3,1])
toString(universe["ticker"][,1])
pmatch("IBLD",toString(universe["ticker"][,1]))
pmatch(toString(universe["ticker"][,1]),"IBLD")
grep("SMXO",toString(universe["ticker"][,1]))
find("SMXO",toString(universe["ticker"][,1]))
?find
?grep
?paste
paste0("SELECT Ticker FROM Security WHERE Ticker = '",toString(universe["ticker"][i,1]),"'",collapse)
toString(universe["ticker"][i,1]))
toString(universe["ticker"][i,1])
paste0("SELECT Ticker FROM Security WHERE Ticker = '",toString(universe["ticker"][i,1]),"'",collapse)
universe$ticker
for (i in universe$ticker) {
rs=dbGetQuery(con,paste("SELECT Ticker FROM Security WHERE Ticker = '",i,"'",sep=""))
if (length(rs)==0) {
dbSendQuery(con,paste("INSERT INTO Security (Ticker, Active) VALUES ('",i,"',TRUE)",sep=""))
}
}
rs = dbGetQuery(con, "SELECT Ticker FROM Security")
rs$ticker
match(rs$ticker,universe$ticker)
rs$ticker %in% universe$ticker
inactive = !(rs$ticker %in% universe$ticker)
inactive
inactive(1)
inactive[1]
inactive[1]=TRUE
inactive
inactive = rs$ticker[!(rs$ticker %in% universe$ticker)]
inactive
universe = dbGetQuery(con,"SELECT Ticker FROM Security WHERE Active = TRUE")
universe
universe$ticker
universe["price"] <- array(NA,2)
universe$price <- array(NA,2)
universe$price <- array(NA,length(universe$ticker))
universe
i=universe$ticker[1]
i
tmp <- getQuote(i)[2]
tmp
tmp[2]
tmp[1]
tmp[1,2]
tmp[2,1]
tmp$Last
universe$price[i,1]
i
universe$ticker==i
tmp$Last
universe[universe$price < MAX_PRICE,]
universe[universe$price < MAX_PRICE]
universe$price < MAX_PRICE
MAX_PRICE
universe$price
universe=universe[1:10,]
universe
for (i in universe$ticker) {
tmp <- getQuote(i)
universe$price[universe$ticker==i] <- tmp$Last
}
universe
universe[universe$price < MAX_PRICE]
?subset
subset(universe, MAX_PRICE)
subset(universe, price < MAX_PRICE)
subset(universe, price < MAX_PRICE-0.02)
universe = subset(universe, price < MAX_PRICE)
universe
selection <- sample(1:dim(universe)[1],MAX_STOCKS)
MAX_STOCKS
?min
length(universe)
ncol(universe)
nrow(universe)
selection <- sample(1:nrow(universe),min(nrow(universe),MAX_STOCKS))
selection
universe[selection,]
?sample
print(universeSelection)
universeSelection <- universe[selection,]
print(universeSelection)
?plot
